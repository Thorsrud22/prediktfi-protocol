generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Creator {
  id              String    @id @default(cuid())
  handle          String    @unique
  wallet          String?   @unique
  score           Float     @default(0.0)
  accuracy        Float     @default(0.0)
  insightsCount   Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  brierMean       Float?
  binsJson        String?
  calibration     String?
  lastScoreUpdate DateTime?
  events          Event[]
  insights        Insight[]

  @@index([lastScoreUpdate])
  @@map("creators")
}

model Insight {
  id              String        @id @default(cuid())
  creatorId       String?
  question        String
  category        String
  horizon         DateTime
  probability     Float
  confidence      Float
  intervalLower   Float
  intervalUpper   Float
  rationale       String
  scenarios       String
  metrics         String
  sources         String
  dataQuality     Float
  modelVersion    String        @default("e8.1")
  stamped         Boolean       @default(false)
  txSig           String?
  stampId         String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  canonical       String?
  p               Decimal?
  deadline        DateTime?
  resolverKind    ResolverKind?
  resolverRef     String?
  status          InsightStatus @default(OPEN)
  memoSig         String?
  slot            Int?
  externalMarkets String?
  tradingEnabled  Boolean       @default(false)
  marketVolume    Float?
  lastMarketSync  DateTime?
  events          Event[]
  creator         Creator?      @relation(fields: [creatorId], references: [id])
  stamp           Stamp?        @relation(fields: [stampId], references: [id])
  outcomes        Outcome[]

  @@index([createdAt])
  @@index([category])
  @@index([stamped])
  @@index([creatorId])
  @@index([status])
  @@index([tradingEnabled])
  @@index([lastMarketSync])
  @@index([status, deadline, marketVolume])
  @@index([deadline])
  @@map("insights")
}

model Stamp {
  id         String    @id @default(cuid())
  merkleRoot String
  chain      String    @default("solana")
  cluster    String    @default("devnet")
  txSig      String    @unique
  createdAt  DateTime  @default(now())
  insights   Insight[]

  @@map("stamps")
}

model Outcome {
  id          String        @id @default(cuid())
  insightId   String
  result      OutcomeResult
  evidenceUrl String?
  decidedBy   DecisionMaker
  decidedAt   DateTime      @default(now())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  insight     Insight       @relation(fields: [insightId], references: [id], onDelete: Cascade)

  @@map("outcomes")
}

model Event {
  id        String   @id @default(cuid())
  userId    String?
  type      String
  meta      String
  createdAt DateTime @default(now())
  insightId String?
  user      Creator? @relation(fields: [userId], references: [id])
  insight   Insight? @relation(fields: [insightId], references: [id])

  @@index([createdAt])
  @@index([type])
  @@index([userId])
  @@map("events")
}

model IdempotencyKey {
  id        String   @id @default(cuid())
  key       String   @unique
  response  String
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([expiresAt])
  @@map("idempotency_keys")
}

model AIAccuracy {
  id                 String   @id @default(cuid())
  modelVersion       String
  category           String
  totalPredictions   Int      @default(0)
  correctPredictions Int      @default(0)
  accuracy           Float    @default(0.0)
  brierScore         Float?
  lastUpdated        DateTime @default(now())
  createdAt          DateTime @default(now())

  @@unique([modelVersion, category])
  @@index([modelVersion])
  @@index([category])
  @@map("ai_accuracy")
}

model AICalibration {
  id                  String   @id @default(cuid())
  modelVersion        String
  category            String
  predictedConfidence Float
  actualOutcome       Boolean
  timestamp           DateTime @default(now())
  createdAt           DateTime @default(now())

  @@index([modelVersion])
  @@index([category])
  @@index([timestamp])
  @@map("ai_calibration")
}

model Wallet {
  id            String            @id @default(cuid())
  address       String            @unique
  chain         String            @default("solana")
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  alerts        AlertRule[]
  snapshots     HoldingSnapshot[]
  strategies    Strategy[]
  assetLossCaps AssetLossCap[]
  dailyLossCaps DailyLossCap[]
  intents       Intent[]
  proTrials     ProTrial[]
  shares        SocialShare[]
  events        UserEvent[]
  retention     UserRetention?
  subscription  UserSubscription?

  @@index([address])
  @@index([chain])
  @@map("advisor_wallets")
}

model Strategy {
  id         String   @id @default(cuid())
  walletId   String
  name       String
  kind       String
  configJson String
  enabled    Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  wallet     Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId])
  @@index([kind])
  @@map("advisor_strategies")
}

model AlertRule {
  id        String       @id @default(cuid())
  walletId  String
  name      String
  ruleJson  String
  channel   String
  target    String?
  enabled   Boolean      @default(true)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  events    AlertEvent[]
  wallet    Wallet       @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId])
  @@index([channel])
  @@map("advisor_alert_rules")
}

model AlertEvent {
  id          String    @id @default(cuid())
  ruleId      String
  firedAt     DateTime  @default(now())
  payloadJson String
  delivered   Boolean   @default(false)
  deliveredAt DateTime?
  rule        AlertRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@index([ruleId])
  @@index([firedAt])
  @@map("advisor_alert_events")
}

model HoldingSnapshot {
  id       String   @id @default(cuid())
  walletId String
  ts       DateTime @default(now())
  asset    String
  amount   String
  valueUsd String
  wallet   Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId, ts])
  @@index([asset])
  @@map("advisor_holding_snapshots")
}

model PMFMetric {
  id         String   @id @default(cuid())
  metricType String
  value      Float
  target     Float
  period     String
  date       DateTime @default(now())
  metadata   String?
  createdAt  DateTime @default(now())

  @@index([metricType, date])
  @@index([period])
  @@map("pmf_metrics")
}

model UserEvent {
  id        String   @id @default(cuid())
  walletId  String
  eventType String
  eventData String?
  sessionId String?
  userAgent String?
  referrer  String?
  timestamp DateTime @default(now())
  wallet    Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId, eventType])
  @@index([timestamp])
  @@index([sessionId])
  @@map("user_events")
}

model UserRetention {
  id           String   @id @default(cuid())
  walletId     String   @unique
  firstAction  DateTime
  lastAction   DateTime
  d1Active     Boolean  @default(false)
  d3Active     Boolean  @default(false)
  d7Active     Boolean  @default(false)
  d14Active    Boolean  @default(false)
  d30Active    Boolean  @default(false)
  totalActions Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  wallet       Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([firstAction])
  @@map("user_retention")
}

model SocialShare {
  id        String   @id @default(cuid())
  intentId  String
  walletId  String
  platform  String
  shareUrl  String?
  receiptId String?
  createdAt DateTime @default(now())
  wallet    Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  intent    Intent   @relation(fields: [intentId], references: [id], onDelete: Cascade)

  @@index([platform, createdAt])
  @@index([intentId])
  @@map("social_shares")
}

model Intent {
  id            String          @id @default(cuid())
  walletId      String
  strategyId    String?
  chain         String          @default("solana")
  base          String
  quote         String          @default("USDC")
  side          String
  sizeJson      String
  tpJson        String?
  slJson        String?
  rationale     String?
  confidence    Float?
  backtestWin   Float?
  expectedDur   String?
  guardsJson    String
  venuePref     String?         @default("jupiter")
  simOnly       Boolean         @default(false)
  createdAt     DateTime        @default(now())
  sourceModelId String? // Model ID when copied from a model strategy
  sourceModelIdHashed String? // Hashed model ID for privacy-safe analytics joins
  receipts      IntentReceipt[]
  wallet        Wallet          @relation(fields: [walletId], references: [id], onDelete: Cascade)
  shares        SocialShare[]

  @@index([walletId, createdAt])
  @@index([base, quote])
  @@index([strategyId])
  @@index([sourceModelId])
  @@index([sourceModelIdHashed])
  @@index([side])
  @@index([createdAt])
  @@map("intents")
}

model IntentReceipt {
  id          String    @id @default(cuid())
  intentId    String
  status      String
  txSig       String?
  simJson     String?
  execJson    String?
  realizedPx  Float?
  feesUsd     Float?
  slippageBps Int?
  blockTime   DateTime?
  notes       String?
  createdAt   DateTime  @default(now())
  intent      Intent    @relation(fields: [intentId], references: [id], onDelete: Cascade)

  @@index([intentId, createdAt])
  @@index([status])
  @@index([createdAt])
  @@index([blockTime])
  @@map("intent_receipts")
}

model SimulatorAccuracy {
  id                   String   @id @default(cuid())
  pair                 String
  side                 String
  expectedPrice        Float
  theoreticalFillPrice Float
  deviationBps         Float
  tradeSizeUsd         Float
  timestamp            DateTime @default(now())
  jupiterQuoteData     String

  @@index([pair, timestamp])
  @@index([side])
  @@index([deviationBps])
  @@map("simulator_accuracy")
}

model InviteCode {
  id        String    @id @default(cuid())
  code      String    @unique
  usedCount Int       @default(0)
  maxUses   Int       @default(100)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  expiresAt DateTime?

  @@index([code])
  @@index([isActive])
  @@map("invite_codes")
}

model AssetLossCap {
  id             String   @id @default(cuid())
  walletId       String
  asset          String
  maxLossPct     Float
  currentLossPct Float    @default(0.0)
  dailyLossUsd   Float    @default(0.0)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  wallet         Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([walletId, asset])
  @@index([walletId])
  @@index([asset])
  @@map("asset_loss_caps")
}

model DailyLossCap {
  id              String   @id @default(cuid())
  walletId        String
  maxDailyLossPct Float
  currentLossPct  Float    @default(0.0)
  dailyLossUsd    Float    @default(0.0)
  date            DateTime @default(now())
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  wallet          Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([walletId, date])
  @@index([walletId])
  @@index([date])
  @@map("daily_loss_caps")
}

model UserSubscription {
  id             String             @id @default(cuid())
  walletId       String             @unique
  tier           UserTier           @default(FREE)
  status         SubscriptionStatus @default(ACTIVE)
  trialEndsAt    DateTime?
  subscriptionId String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  quotas         UserQuota[]
  wallet         Wallet             @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([tier])
  @@index([status])
  @@map("user_subscriptions")
}

model UserQuota {
  id             String           @id @default(cuid())
  subscriptionId String
  quotaType      QuotaType
  limit          Int
  used           Int              @default(0)
  resetAt        DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  subscription   UserSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([subscriptionId, quotaType, resetAt])
  @@index([subscriptionId])
  @@index([quotaType])
  @@index([resetAt])
  @@map("user_quotas")
}

model ProTrial {
  id          String           @id @default(cuid())
  walletId    String
  triggerType TrialTriggerType
  triggerData String?
  startsAt    DateTime         @default(now())
  endsAt      DateTime
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  wallet      Wallet           @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId])
  @@index([isActive])
  @@index([endsAt])
  @@map("pro_trials")
}

model AnalyticsEvent {
  id             String   @id @default(cuid())
  sessionId      String
  eventType      String
  modelIdHash    String?
  intentId       String?
  timestamp      DateTime @default(now())
  userAgent      String?
  referer        String?
  idempotencyKey String   @unique
  createdAt      DateTime @default(now())

  @@index([sessionId, eventType])
  @@index([eventType, timestamp])
  @@index([modelIdHash, eventType])
  @@index([timestamp])
  @@map("analytics_events")
}

enum ResolverKind {
  PRICE
  URL
  TEXT
}

enum InsightStatus {
  OPEN
  COMMITTED
  RESOLVED
}

enum OutcomeResult {
  YES
  NO
  INVALID
}

enum DecisionMaker {
  AGENT
  USER
}

enum UserTier {
  FREE
  PRO
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  TRIAL
  EXPIRED
  CANCELLED
}

enum QuotaType {
  INTENTS_WEEKLY
  INSIGHTS_DAILY
  QUOTES_DAILY
}

enum TrialTriggerType {
  SHARE_RECEIPTS
  INVITE_CODE
  MANUAL
}
