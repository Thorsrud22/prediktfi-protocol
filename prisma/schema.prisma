generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Creator {
  id              String    @id @default(cuid())
  handle          String    @unique
  wallet          String?   @unique
  score           Float     @default(0.0)
  accuracy        Float     @default(0.0)
  insightsCount   Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  brierMean       Float?
  binsJson        String?
  calibration     String?
  lastScoreUpdate DateTime?
  events          Event[]
  insights        Insight[]

  @@index([lastScoreUpdate])
  @@map("creators")
}

model Insight {
  id              String        @id @default(cuid())
  creatorId       String?
  question        String
  category        String
  horizon         DateTime
  probability     Float
  confidence      Float
  intervalLower   Float
  intervalUpper   Float
  rationale       String
  scenarios       String
  metrics         String
  sources         String
  dataQuality     Float
  modelVersion    String        @default("e8.1")
  stamped         Boolean       @default(false)
  txSig           String?
  stampId         String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  canonical       String?
  p               Decimal?
  deadline        DateTime?
  resolverKind    ResolverKind?
  resolverRef     String?
  status          InsightStatus @default(OPEN)
  memoSig         String?
  slot            Int?
  externalMarkets String?
  tradingEnabled  Boolean       @default(false)
  marketVolume    Float?
  lastMarketSync  DateTime?
  events          Event[]
  stamp           Stamp?        @relation(fields: [stampId], references: [id])
  creator         Creator?      @relation(fields: [creatorId], references: [id])
  outcomes        Outcome[]

  @@index([createdAt])
  @@index([category])
  @@index([stamped])
  @@index([creatorId])
  @@index([status])
  @@index([tradingEnabled])
  @@index([lastMarketSync])
  @@index([status, deadline, marketVolume])
  @@index([deadline])
  @@map("insights")
}

model Stamp {
  id         String    @id @default(cuid())
  merkleRoot String
  chain      String    @default("solana")
  cluster    String    @default("devnet")
  txSig      String    @unique
  createdAt  DateTime  @default(now())
  insights   Insight[]

  @@map("stamps")
}

model Outcome {
  id          String        @id @default(cuid())
  insightId   String
  result      OutcomeResult
  evidenceUrl String?
  decidedBy   DecisionMaker
  decidedAt   DateTime      @default(now())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  insight     Insight       @relation(fields: [insightId], references: [id], onDelete: Cascade)

  @@map("outcomes")
}

model Event {
  id        String   @id @default(cuid())
  userId    String?
  type      String
  meta      String
  createdAt DateTime @default(now())
  insightId String?
  insight   Insight? @relation(fields: [insightId], references: [id])
  user      Creator? @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([type])
  @@index([userId])
  @@map("events")
}

model IdempotencyKey {
  id        String   @id @default(cuid())
  key       String   @unique
  response  String
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([expiresAt])
  @@map("idempotency_keys")
}

model AIAccuracy {
  id              String   @id @default(cuid())
  modelVersion    String
  category        String
  totalPredictions Int     @default(0)
  correctPredictions Int  @default(0)
  accuracy        Float    @default(0.0)
  brierScore      Float?
  lastUpdated     DateTime @default(now())
  createdAt       DateTime @default(now())

  @@unique([modelVersion, category])
  @@index([modelVersion])
  @@index([category])
  @@map("ai_accuracy")
}

model AICalibration {
  id                  String   @id @default(cuid())
  modelVersion        String
  category            String
  predictedConfidence Float
  actualOutcome       Boolean
  timestamp           DateTime @default(now())
  createdAt           DateTime @default(now())

  @@index([modelVersion])
  @@index([category])
  @@index([timestamp])
  @@map("ai_calibration")
}

// Advisor v0.1 - Monitor-only
model Wallet {
  id           String   @id @default(cuid())
  address      String   @unique
  chain        String   @default("solana")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  strategies   Strategy[]
  alerts       AlertRule[]
  snapshots    HoldingSnapshot[]
  // PMF Analytics
  events       UserEvent[]
  retention    UserRetention?
  shares       SocialShare[]
  intents      Intent[]
  // Risk Management
  assetLossCaps AssetLossCap[]
  dailyLossCaps DailyLossCap[]
  // Subscription Management
  subscription UserSubscription?
  proTrials    ProTrial[]

  @@index([address])
  @@index([chain])
  @@map("advisor_wallets")
}

model Strategy {
  id           String   @id @default(cuid())
  walletId     String
  name         String
  kind         String   // "risk", "rebalance", "momentum"
  configJson   String   // JSON string
  enabled      Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  wallet       Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId])
  @@index([kind])
  @@map("advisor_strategies")
}

model AlertRule {
  id           String   @id @default(cuid())
  walletId     String
  name         String
  ruleJson     String   // JSON string
  channel      String   // "inapp", "email", "webhook"
  target       String?  // email or webhook URL
  enabled      Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  wallet       Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  events       AlertEvent[]

  @@index([walletId])
  @@index([channel])
  @@map("advisor_alert_rules")
}

model AlertEvent {
  id           String   @id @default(cuid())
  ruleId       String
  firedAt      DateTime @default(now())
  payloadJson  String   // JSON string
  delivered    Boolean  @default(false)
  deliveredAt  DateTime?
  rule         AlertRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@index([ruleId])
  @@index([firedAt])
  @@map("advisor_alert_events")
}

model HoldingSnapshot {
  id           String   @id @default(cuid())
  walletId     String
  ts           DateTime @default(now())
  asset        String   // mint or symbol
  amount       String   // Decimal as string
  valueUsd     String   // Decimal as string
  wallet       Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId, ts])
  @@index([asset])
  @@map("advisor_holding_snapshots")
}

// PMF Metrics and Analytics
model PMFMetric {
  id          String   @id @default(cuid())
  metricType  String   // "click_sim_rate", "sim_sign_rate", "d7_retention", "social_sharing", "signal_following"
  value       Float    // The actual metric value (0.0 to 1.0 for rates, count for others)
  target      Float    // Target value for this metric
  period      String   // "daily", "weekly", "monthly"
  date        DateTime @default(now())
  metadata    String?  // JSON with additional context
  createdAt   DateTime @default(now())

  @@index([metricType, date])
  @@index([period])
  @@map("pmf_metrics")
}

model UserEvent {
  id          String   @id @default(cuid())
  walletId    String
  eventType   String   // "click_trade_button", "simulate_intent", "sign_intent", "share_receipt", "follow_signal"
  eventData   String?  // JSON with event details
  sessionId   String?  // Track user sessions
  userAgent   String?  // Browser info
  referrer    String?  // Where they came from
  timestamp   DateTime @default(now())
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId, eventType])
  @@index([timestamp])
  @@index([sessionId])
  @@map("user_events")
}

model UserRetention {
  id          String   @id @default(cuid())
  walletId    String
  firstAction DateTime // When they first used Actions
  lastAction  DateTime // When they last used Actions
  d1Active    Boolean  @default(false) // Active on day 1
  d3Active    Boolean  @default(false) // Active on day 3
  d7Active    Boolean  @default(false) // Active on day 7
  d14Active   Boolean  @default(false) // Active on day 14
  d30Active   Boolean  @default(false) // Active on day 30
  totalActions Int     @default(0) // Total number of actions taken
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([walletId])
  @@index([firstAction])
  @@map("user_retention")
}

model SocialShare {
  id          String   @id @default(cuid())
  intentId    String
  walletId    String
  platform    String   // "twitter", "linkedin", "facebook", "copy_trade"
  shareUrl    String?  // The shared URL
  receiptId   String?  // Associated receipt
  createdAt   DateTime @default(now())
  intent      Intent   @relation(fields: [intentId], references: [id], onDelete: Cascade)
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([platform, createdAt])
  @@index([intentId])
  @@map("social_shares")
}

model Intent {
  id           String   @id @default(cuid())
  walletId     String
  strategyId   String?
  chain        String   @default("solana")
  base         String   // "SOL" | "ETH" | "BTC" (v1)
  quote        String   @default("USDC") // "USDC" (v1)
  side         String   // "BUY" | "SELL"
  sizeJson     String   // JSON: {type:"pct"|"abs", value:number, token?:string}
  tpJson       String?  // JSON: take profit
  slJson       String?  // JSON: stop loss
  rationale    String?
  confidence   Float?
  backtestWin  Float?
  expectedDur  String?  // "14d"
  guardsJson   String   // JSON: {dailyLossCapPct,posLimitPct,minLiqUsd,maxSlippageBps,expiresAt}
  venuePref    String?  @default("jupiter")
  simOnly      Boolean  @default(false)
  createdAt    DateTime @default(now())
  receipts     IntentReceipt[]
  shares       SocialShare[]
  wallet       Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId, createdAt])
  @@index([base, quote])
  @@index([strategyId])
  @@index([side])
  @@index([createdAt])
  @@map("intents")
}

model IntentReceipt {
  id           String   @id @default(cuid())
  intentId     String
  status       String   // simulated|executed|failed
  txSig        String?
  simJson      String?  // JSON: simulation results
  execJson     String?  // JSON: execution results
  realizedPx   Float?
  feesUsd      Float?
  slippageBps  Int?
  blockTime    DateTime?
  notes        String?
  createdAt    DateTime @default(now())
  intent       Intent   @relation(fields: [intentId], references: [id], onDelete: Cascade)

  @@index([intentId, createdAt])
  @@index([status])
  @@index([createdAt])
  @@index([blockTime])
  @@map("intent_receipts")
}

model SimulatorAccuracy {
  id                    String   @id @default(cuid())
  pair                  String   // "SOL/USDC", "ETH/USDC", etc.
  side                  String   // "BUY" | "SELL"
  expectedPrice         Float    // Price we expected
  theoreticalFillPrice  Float    // Price from Jupiter quote
  deviationBps          Float    // Deviation in basis points
  tradeSizeUsd          Float    // Trade size in USD
  timestamp             DateTime @default(now())
  jupiterQuoteData      String   // JSON: Full Jupiter quote for debugging
  
  @@index([pair, timestamp])
  @@index([side])
  @@index([deviationBps])
  @@map("simulator_accuracy")
}

model InviteCode {
  id          String   @id @default(cuid())
  code        String   @unique
  usedCount   Int      @default(0)
  maxUses     Int      @default(100)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
  
  @@index([code])
  @@index([isActive])
  @@map("invite_codes")
}

model AssetLossCap {
  id              String   @id @default(cuid())
  walletId        String
  asset           String   // SOL, ETH, BTC, etc.
  maxLossPct      Float    // Max loss percentage per asset (e.g., 5.0 for 5%)
  currentLossPct  Float    @default(0.0) // Current loss percentage
  dailyLossUsd    Float    @default(0.0) // Daily loss in USD
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  wallet          Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  
  @@unique([walletId, asset])
  @@index([walletId])
  @@index([asset])
  @@map("asset_loss_caps")
}

model DailyLossCap {
  id              String   @id @default(cuid())
  walletId        String
  maxDailyLossPct Float    // Max daily loss percentage (e.g., 10.0 for 10%)
  currentLossPct  Float    @default(0.0) // Current daily loss percentage
  dailyLossUsd    Float    @default(0.0) // Daily loss in USD
  date            DateTime @default(now()) // Date for tracking
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  wallet          Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  
  @@unique([walletId, date])
  @@index([walletId])
  @@index([date])
  @@map("daily_loss_caps")
}

// User subscription and quota management
model UserSubscription {
  id              String   @id @default(cuid())
  walletId        String   @unique
  tier            UserTier @default(FREE)
  status          SubscriptionStatus @default(ACTIVE)
  trialEndsAt     DateTime?
  subscriptionId  String?  // Coinbase Commerce charge ID
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  wallet          Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  quotas          UserQuota[]
  
  @@index([tier])
  @@index([status])
  @@map("user_subscriptions")
}

model UserQuota {
  id              String   @id @default(cuid())
  subscriptionId  String
  quotaType       QuotaType
  limit           Int      // Weekly limit for this quota type
  used            Int      @default(0)
  resetAt         DateTime // When quota resets (weekly)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  subscription    UserSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@unique([subscriptionId, quotaType, resetAt])
  @@index([subscriptionId])
  @@index([quotaType])
  @@index([resetAt])
  @@map("user_quotas")
}

model ProTrial {
  id              String   @id @default(cuid())
  walletId        String
  triggerType     TrialTriggerType
  triggerData     String?  // JSON with trigger details (e.g., shared receipts)
  startsAt        DateTime @default(now())
  endsAt          DateTime
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  wallet          Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  
  @@index([walletId])
  @@index([isActive])
  @@index([endsAt])
  @@map("pro_trials")
}

enum ResolverKind {
  PRICE
  URL
  TEXT
}

enum InsightStatus {
  OPEN
  COMMITTED
  RESOLVED
}

enum OutcomeResult {
  YES
  NO
  INVALID
}

enum DecisionMaker {
  AGENT
  USER
}

enum UserTier {
  FREE
  PRO
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  TRIAL
  EXPIRED
  CANCELLED
}

enum QuotaType {
  INTENTS_WEEKLY
  INSIGHTS_DAILY
  QUOTES_DAILY
}

enum TrialTriggerType {
  SHARE_RECEIPTS
  INVITE_CODE
  MANUAL
}
