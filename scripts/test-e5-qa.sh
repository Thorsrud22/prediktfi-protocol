#!/bin/bash

# ‚úÖ E5 QA/Smoke Test Script - Beta Launch & Prod Hardening
# Tests production readiness after BLOCK E5 implementation

set -e

echo "üöÄ Starting E5 Beta Launch QA Tests"
echo "==================================="

# Test 1: Environment requirements check
echo ""
echo "1Ô∏è‚É£  Environment Requirements Test"
echo "--------------------------------"

# Check Node.js version
NODE_VERSION=$(node -v)
echo "‚úÖ Node.js version: $NODE_VERSION"

# Check package manager
if command -v pnpm &> /dev/null; then
    PNPM_VERSION=$(pnpm -v)
    echo "‚úÖ pnpm version: $PNPM_VERSION"
    PKG_MANAGER="pnpm"
elif command -v npm &> /dev/null; then
    NPM_VERSION=$(npm -v)
    echo "‚úÖ npm version: $NPM_VERSION"
    PKG_MANAGER="npm"
else
    echo "‚ùå No package manager found (npm/pnpm)"
    exit 1
fi

# Test 2: Build verification
echo ""
echo "2Ô∏è‚É£  Build Verification Test"
echo "---------------------------"

echo "Building application..."
if $PKG_MANAGER run build &> /dev/null; then
    echo "‚úÖ Build completed successfully"
else
    echo "‚ùå Build failed"
    exit 1
fi

# Test 3: Health endpoint check (local)
echo ""
echo "3Ô∏è‚É£  Health Endpoint Test"
echo "------------------------"

# Check if dev server is running
if curl -s http://localhost:3000 > /dev/null 2>&1; then
    echo "‚úÖ Dev server detected"
    
    # Test health endpoint
    HEALTH_RESPONSE=$(curl -s http://localhost:3000/api/_internal/health)
    if echo "$HEALTH_RESPONSE" | grep -q '"ok":true'; then
        echo "‚úÖ Health endpoint returns ok:true"
    else
        echo "‚ùå Health endpoint response invalid: $HEALTH_RESPONSE"
        exit 1
    fi
    
    # Check if response has timestamp
    if echo "$HEALTH_RESPONSE" | grep -q '"ts":'; then
        echo "‚úÖ Health endpoint includes timestamp"
    else
        echo "‚ùå Health endpoint missing timestamp"
        exit 1
    fi
else
    echo "‚ö†Ô∏è  Dev server not running - skipping local health check"
    echo "   Run '$PKG_MANAGER dev' to test live endpoints"
fi

# Test 4: Pricing page accessibility
echo ""
echo "4Ô∏è‚É£  Pricing Page Accessibility Test"
echo "----------------------------------"

if curl -s http://localhost:3000 > /dev/null 2>&1; then
    PRICING_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/pricing)
    if [ "$PRICING_STATUS" = "200" ]; then
        echo "‚úÖ Pricing page accessible (200)"
    else
        echo "‚ùå Pricing page returned status: $PRICING_STATUS"
        exit 1
    fi
else
    echo "‚ö†Ô∏è  Dev server not running - skipping pricing page test"
fi

# Test 5: Status page test
echo ""
echo "5Ô∏è‚É£  Status Page Test"
echo "-------------------"

if curl -s http://localhost:3000 > /dev/null 2>&1; then
    STATUS_RESPONSE=$(curl -s http://localhost:3000/status)
    if echo "$STATUS_RESPONSE" | grep -q "System Status"; then
        echo "‚úÖ Status page accessible"
    else
        echo "‚ùå Status page not accessible"
        exit 1
    fi
    
    # Check for plan header in response
    STATUS_HEADERS=$(curl -s -I http://localhost:3000/status)
    if echo "$STATUS_HEADERS" | grep -i "x-plan:"; then
        echo "‚úÖ x-plan header found in status response"
    else
        echo "‚ùå x-plan header missing from status response"
        exit 1
    fi
else
    echo "‚ö†Ô∏è  Dev server not running - skipping status page test"
fi

# Test 6: Security headers check
echo ""
echo "6Ô∏è‚É£  Security Headers Test"
echo "-------------------------"

# Check if next.config.js has security headers
if grep -q "Strict-Transport-Security" next.config.js; then
    echo "‚úÖ HSTS header configured"
else
    echo "‚ùå HSTS header missing from next.config.js"
    exit 1
fi

if grep -q "X-Frame-Options" next.config.js; then
    echo "‚úÖ X-Frame-Options configured"
else
    echo "‚ùå X-Frame-Options missing from next.config.js"
    exit 1
fi

if grep -q "Content-Security-Policy" next.config.js; then
    echo "‚úÖ CSP configured"
else
    echo "‚ùå CSP missing from next.config.js"
    exit 1
fi

if grep -q "coinbase.com" next.config.js; then
    echo "‚úÖ Coinbase domains allowed in CSP"
else
    echo "‚ùå Coinbase domains missing from CSP"
    exit 1
fi

# Test 7: Plan detection system
echo ""
echo "7Ô∏è‚É£  Plan Detection System Test"
echo "------------------------------"

if [ -f "app/lib/plan.ts" ]; then
    echo "‚úÖ plan.ts exists"
else
    echo "‚ùå plan.ts missing"
    exit 1
fi

if grep -q "setProCookie" app/lib/plan.ts; then
    echo "‚úÖ setProCookie function found"
else
    echo "‚ùå setProCookie function missing"
    exit 1
fi

if grep -q "HttpOnly" app/lib/plan.ts; then
    echo "‚úÖ HttpOnly cookie flag configured"
else
    echo "‚ùå HttpOnly cookie flag missing"
    exit 1
fi

if grep -q "Secure" app/lib/plan.ts; then
    echo "‚úÖ Secure cookie flag configured"
else
    echo "‚ùå Secure cookie flag missing"
    exit 1
fi

# Test 8: API route structure
echo ""
echo "8Ô∏è‚É£  API Route Structure Test"
echo "----------------------------"

# Check critical API routes exist
api_routes=(
    "app/api/_internal/health/route.ts"
    "app/api/ai/predict/route.ts"
    "app/api/billing/redeem/route.ts"
    "app/api/billing/webhook/route.ts"
)

for route in "${api_routes[@]}"; do
    if [ -f "$route" ]; then
        echo "‚úÖ $route exists"
    else
        echo "‚ùå $route missing"
        exit 1
    fi
done

# Test 9: Environment configuration
echo ""
echo "9Ô∏è‚É£  Environment Configuration Test"
echo "----------------------------------"

# Check .env.example has E5 requirements
required_env_vars=(
    "PREDIKT_BASE_URL"
    "PREDIKT_LICENSE_SECRET"
    "COINBASE_COMMERCE_API_KEY"
    "COINBASE_COMMERCE_SHARED_SECRET"
    "NEXT_PUBLIC_APP_ENV"
)

for var in "${required_env_vars[@]}"; do
    if grep -q "$var" .env.example; then
        echo "‚úÖ $var configured in .env.example"
    else
        echo "‚ùå $var missing from .env.example"
        exit 1
    fi
done

# Test 10: TypeScript compilation
echo ""
echo "üîü TypeScript Compilation Test"
echo "------------------------------"

echo "Checking TypeScript compilation..."
if npx tsc --noEmit 2>/dev/null; then
    echo "‚úÖ TypeScript compilation successful"
else
    echo "‚ùå TypeScript compilation failed"
    exit 1
fi

# Test 11: Pro cookie simulation (if dev server running)
echo ""
echo "1Ô∏è‚É£1Ô∏è‚É£ Pro Cookie Simulation Test"
echo "-------------------------------"

if curl -s http://localhost:3000 > /dev/null 2>&1; then
    echo "‚ÑπÔ∏è  Testing license redeem flow..."
    
    # Test license endpoint exists and responds
    REDEEM_RESPONSE=$(curl -s -X POST http://localhost:3000/api/billing/redeem \
        -H "Content-Type: application/json" \
        -d '{"license":"invalid"}' || echo "")
    
    if [ -n "$REDEEM_RESPONSE" ]; then
        echo "‚úÖ License redeem endpoint responds"
    else
        echo "‚ùå License redeem endpoint not responding"
        exit 1
    fi
else
    echo "‚ö†Ô∏è  Dev server not running - skipping cookie simulation"
fi

echo ""
echo "üéâ E5 Beta Launch QA Tests Completed!"
echo "====================================="
echo ""
echo "‚úÖ All E5 components verified:"
echo "   ‚Ä¢ Environment requirements met"
echo "   ‚Ä¢ Build process working"
echo "   ‚Ä¢ Health endpoints functional"
echo "   ‚Ä¢ Security headers configured"
echo "   ‚Ä¢ Plan detection system ready"
echo "   ‚Ä¢ API routes structured correctly"
echo "   ‚Ä¢ TypeScript compilation clean"
echo ""
echo "üöÄ Ready for production deployment!"
echo ""
echo "Next steps:"
echo "   1. Configure Vercel environment variables"
echo "   2. Set up Coinbase webhook endpoints" 
echo "   3. Run production smoke tests"
echo "   4. Monitor health endpoint post-deploy"
