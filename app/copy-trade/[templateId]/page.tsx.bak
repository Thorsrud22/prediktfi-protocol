/**
 * Copy Trading Page
 * /copy-trade/[templateId]
 * Allows users to copy and customize trading templates
 */

'use client';

import { useState, useEffect } from 'react';
import { useParams } from 'next/navigation';
import { SanitizedTemplate } from '../../../lib/intents/copy-trading';
import { getSmartDefaults, SmartDefaults } from '../../../app/lib/intents/smart-defaults';
import { Connection } from '@solana/web3.js';

export default function CopyTradePage() {
  const params = useParams();
  const templateId = params.templateId as string;
  
  const [template, setTemplate] = useState<SanitizedTemplate | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [smartDefaults, setSmartDefaults] = useState<SmartDefaults | null>(null);
  const [customizedTemplate, setCustomizedTemplate] = useState<Partial<SanitizedTemplate>>({});

  useEffect(() => {
    const fetchTemplate = async () => {
      try {
        setLoading(true);
        setError(null);

        const response = await fetch(`/api/copy-trade/${templateId}`);
        const data = await response.json();

        if (!data.success) {
          throw new Error(data.error || 'Failed to load template');
        }

        setTemplate(data.template);
        setCustomizedTemplate(data.template);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Unknown error');
      } finally {
        setLoading(false);
      }
    };

    if (templateId) {
      fetchTemplate();
    }
  }, [templateId]);

  // Calculate smart defaults when template loads
  useEffect(() => {
    const calculateDefaults = async () => {
      if (!template) return;
      
      try {
        const connection = new Connection(process.env.NEXT_PUBLIC_SOLANA_RPC_URL || 'https://api.mainnet-beta.solana.com');
        const defaults = await getSmartDefaults('', template.side, connection);
        setSmartDefaults(defaults);
      } catch (error) {
        console.error('Failed to calculate smart defaults:', error);
      }
    };

    calculateDefaults();
  }, [template]);

  const handleCopyTrade = () => {
    // This would open the trade panel with the customized template
    const tradeData = {
      ...customizedTemplate,
      isFromCopy: true,
      originalTemplateId: templateId
    };
    
    // Store in localStorage for the trade panel to pick up
    localStorage.setItem('copyTradeData', JSON.stringify(tradeData));
    
    // Redirect to actions page
    window.location.href = '/advisor/actions';
  };

  const handleSizeAdjustment = (newSizePct: number) => {
    setCustomizedTemplate(prev => ({
      ...prev,
      posLimitPct: Math.min(newSizePct * 2, 15),
      dailyLossCapPct: Math.min(newSizePct * 0.5, 5)
    }));
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading trading template...</p>
        </div>
      </div>
    );
  }

  if (error || !template) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-red-600 text-6xl mb-4">⚠️</div>
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Template Not Found</h1>
          <p className="text-gray-600 mb-4">{error || 'This trading template could not be loaded.'}</p>
          <a 
            href="/advisor/actions" 
            className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Go to Trading
          </a>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-2xl mx-auto px-4">
        {/* Header */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Copy Trade</h1>
              <p className="text-gray-600">SOL/USDC • {template.side}</p>
            </div>
            <div className="text-right">
              <div className="text-sm text-gray-500">Template ID</div>
              <div className="font-mono text-sm text-gray-700">{templateId}</div>
            </div>
          </div>

          {/* Original Strategy */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h3 className="font-semibold text-blue-900 mb-2">Original Strategy</h3>
            <p className="text-blue-800 text-sm leading-relaxed">{template.rationale}</p>
            <div className="flex items-center justify-between mt-3 text-xs text-blue-600">
              <span>Confidence: {Math.round(template.confidence * 100)}%</span>
              <span>Duration: {template.expectedDur}</span>
              {template.originalCreator && (
                <span>By: {template.originalCreator.slice(0, 8)}...</span>
              )}
            </div>
          </div>
        </div>

        {/* Smart Defaults */}
        {smartDefaults && (
          <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
            <h3 className="font-semibold text-green-900 mb-2">Smart Sizing for You</h3>
            <p className="text-green-700 text-sm mb-3">{smartDefaults.rationale}</p>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-green-600 font-medium">Recommended:</span> {smartDefaults.recommendedSizePct}% (${smartDefaults.recommendedSizeUsd.toFixed(0)})
              </div>
              <div>
                <span className="text-green-600 font-medium">Max Safe:</span> {smartDefaults.maxSafeSizePct}% (${smartDefaults.maxSafeSizeUsd.toFixed(0)})
              </div>
            </div>
          </div>
        )}

        {/* Customization Options */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
          <h3 className="font-semibold text-gray-900 mb-4">Customize Your Trade</h3>
          
          {/* Position Size */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Position Size
            </label>
            <div className="flex gap-2">
              <input
                type="number"
                value={customizedTemplate.posLimitPct || template.posLimitPct}
                onChange={(e) => handleSizeAdjustment(parseFloat(e.target.value) || 0)}
                min="1"
                max="20"
                step="0.1"
                className="flex-1 p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="5"
              />
              <span className="flex items-center text-sm text-gray-500">%</span>
            </div>
            
            {/* Quick Size Suggestions */}
            {smartDefaults && (
              <div className="mt-2">
                <div className="text-xs text-gray-600 mb-1">Quick suggestions:</div>
                <div className="flex gap-2">
                  {[
                    { label: 'Conservative', pct: 2, color: 'bg-green-100 text-green-800' },
                    { label: 'Moderate', pct: smartDefaults.recommendedSizePct, color: 'bg-blue-100 text-blue-800' },
                    { label: 'Aggressive', pct: Math.min(smartDefaults.maxSafeSizePct, 8), color: 'bg-orange-100 text-orange-800' }
                  ].map((suggestion) => (
                    <button
                      key={suggestion.label}
                      type="button"
                      onClick={() => handleSizeAdjustment(suggestion.pct)}
                      className={`px-2 py-1 rounded text-xs ${suggestion.color} ${
                        (customizedTemplate.posLimitPct || template.posLimitPct) === suggestion.pct ? 'ring-2 ring-blue-500' : ''
                      }`}
                    >
                      {suggestion.label} ({suggestion.pct}%)
                    </button>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Risk Settings */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Daily Loss Cap
              </label>
              <input
                type="number"
                value={customizedTemplate.dailyLossCapPct || template.dailyLossCapPct}
                onChange={(e) => setCustomizedTemplate(prev => ({ ...prev, dailyLossCapPct: parseFloat(e.target.value) || 0 }))}
                min="1"
                max="10"
                step="0.1"
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Max Slippage
              </label>
              <input
                type="number"
                value={customizedTemplate.maxSlippageBps || template.maxSlippageBps}
                onChange={(e) => setCustomizedTemplate(prev => ({ ...prev, maxSlippageBps: parseFloat(e.target.value) || 0 }))}
                min="10"
                max="100"
                step="5"
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex gap-4">
          <button
            onClick={handleCopyTrade}
            className="flex-1 bg-blue-600 text-white py-3 px-6 rounded-lg font-semibold hover:bg-blue-700 transition-colors"
          >
            Copy This Trade
          </button>
          <a
            href="/advisor/actions"
            className="flex-1 bg-gray-100 text-gray-700 py-3 px-6 rounded-lg font-semibold hover:bg-gray-200 transition-colors text-center"
          >
            Create New Trade
          </a>
        </div>

        {/* Disclaimer */}
        <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
          <div className="flex items-start">
            <div className="text-yellow-600 text-lg mr-2">⚠️</div>
            <div className="text-sm text-yellow-800">
              <p className="font-medium mb-1">Important Disclaimer</p>
              <p>This is a copy of someone else's trading strategy. Always do your own research and never risk more than you can afford to lose. Past performance does not guarantee future results.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
