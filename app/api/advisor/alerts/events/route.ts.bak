// app/api/advisor/alerts/events/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { isFeatureEnabled } from '../../../../../src/lib/flags';
import { prisma } from '../../../../../src/lib/prisma';

export async function GET(request: NextRequest) {
  // Check if alerts feature is enabled
  if (!isFeatureEnabled('ALERTS')) {
    return NextResponse.json({ error: 'Alerts feature not enabled' }, { status: 403 });
  }

  try {
    const { searchParams } = new URL(request.url);
    const walletId = searchParams.get('walletId');
    const ruleId = searchParams.get('ruleId');
    const limit = parseInt(searchParams.get('limit') || '50');
    const offset = parseInt(searchParams.get('offset') || '0');
    
    if (!walletId && !ruleId) {
      return NextResponse.json({ error: 'Wallet ID or Rule ID required' }, { status: 400 });
    }

    // Build where clause
    const where: any = {};
    if (walletId) {
      where.rule = { walletId };
    }
    if (ruleId) {
      where.ruleId = ruleId;
    }

    const events = await prisma.alertEvent.findMany({
      where,
      include: {
        rule: {
          select: {
            id: true,
            name: true,
            walletId: true,
            channel: true
          }
        }
      },
      orderBy: { firedAt: 'desc' },
      take: limit,
      skip: offset
    });

    // Get total count for pagination
    const totalCount = await prisma.alertEvent.count({ where });

    return NextResponse.json({
      success: true,
      data: {
        events: events.map(event => ({
          id: event.id,
          ruleId: event.ruleId,
          ruleName: event.rule.name,
          walletId: event.rule.walletId,
          channel: event.rule.channel,
          firedAt: event.firedAt,
          delivered: event.delivered,
          deliveredAt: event.deliveredAt,
          payload: JSON.parse(event.payloadJson)
        })),
        pagination: {
          total: totalCount,
          limit,
          offset,
          hasMore: offset + limit < totalCount
        }
      }
    });

  } catch (error) {
    console.error('Error getting alert events:', error);
    return NextResponse.json(
      { error: 'Failed to get alert events' },
      { status: 500 }
    );
  }
}
